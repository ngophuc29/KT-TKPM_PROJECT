const Inventory = require("../models/InventoryModels");
const axios = require("axios");

// URL c·ªßa Product Service (ƒë·ªïi n·∫øu c·∫ßn)
const PRODUCT_SERVICE_URL = "http://localhost:3000/api/products/products";
const PRODUCT_SERVICE_URLImport = "http://localhost:3000/api/products/product";
const PRODUCT_UPDATE_STOCK_URL = "http://localhost:3000/api/products/update-stock";
const LOW_STOCK_THRESHOLD = 5; // Ng∆∞·ª°ng c·∫£nh b√°o t·ªìn kho th·∫•p

// ------------------------------
// H√†m helper d√πng ƒë·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ Product Service
// ------------------------------
const fetchProductsData = async () => {
    const response = await axios.get(PRODUCT_SERVICE_URL);
    const products = response.data.data;
    if (!Array.isArray(products)) {
        throw new Error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá t·ª´ Product Service");
    }
    return products;
};

// ------------------------------
// 1Ô∏è‚É£ API l·∫•y to√†n b·ªô s·∫£n ph·∫©m t·ª´ Product Service (ƒë·ªÉ ki·ªÉm tra stock)
// ------------------------------
exports.getAllProducts = async (req, res) => {
    try {
        const products = await fetchProductsData();
        res.json(products);
    } catch (error) {
        res.status(500).json({
            message: "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m",
            error: error.message,
        });
    }
};

// ------------------------------
// 2Ô∏è‚É£ API l·∫•y danh s√°ch t·ªìn kho t·ª´ Inventory Model
// ------------------------------
exports.getInventory = async (req, res) => {
    try {
        // ∆Øu ti√™n l·∫•y d·ªØ li·ªáu t·ª´ Inventory Model
        const inventoryData = await Inventory.find({});
        if (!inventoryData || inventoryData.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu t·ªìn kho trong Inventory" });
        }
        const result = inventoryData.map(item => ({
            productId: item.productId,
            name: item.name,
            stock: item.quantity,
            lowStock: item.quantity <= LOW_STOCK_THRESHOLD
        }));
        res.json(result);
    } catch (error) {
        res.status(500).json({
            message: "L·ªói khi l·∫•y t·ªìn kho t·ª´ Inventory Model",
            error: error.message,
        });
    }
};

// ------------------------------
// 3Ô∏è‚É£ API l·∫•y stock theo danh s√°ch productId
//     Fallback: n·∫øu l·ªói, l·∫•y d·ªØ li·ªáu t·ª´ Inventory Model
// ------------------------------
exports.getStockByProductIds = async (req, res) => {
    try {
        // L·∫•y productIds t·ª´ params v√† chuy·ªÉn th√†nh m·∫£ng
        const { productIds } = req.params;
        const productIdsArray = productIds ? productIds.split(',') : [];
        if (!Array.isArray(productIdsArray) || productIdsArray.length === 0) {
            return res.status(400).json({ message: "Danh s√°ch productIds kh√¥ng h·ª£p l·ªá" });
        }
        const products = await fetchProductsData();
        const filtered = products.filter((product) =>
            productIdsArray.includes(product._id)
        );
        res.json(filtered.map((p) => ({ productId: p._id, stock: p.stock })));
    } catch (error) {
        console.error("L·ªói khi l·∫•y t·ªìn kho theo danh s√°ch t·ª´ Product Service:", error.message);
        // Fallback: l·∫•y t·ª´ Inventory Model
        try {
            const productIdsArray = req.params.productIds ? req.params.productIds.split(',') : [];
            const inventoryData = await Inventory.find({
                productId: { $in: productIdsArray },
            });
            res.json(inventoryData.map((item) => ({
                productId: item.productId,
                stock: item.quantity,
            })));
        } catch (fallbackError) {
            res.status(500).json({
                message: "L·ªói khi l·∫•y t·ªìn kho theo danh s√°ch t·ª´ Inventory Model",
                error: fallbackError.message,
            });
        }
    }
};

// ------------------------------
// 4Ô∏è‚É£ API ki·ªÉm tra s·∫£n ph·∫©m c√≤n h√†ng kh√¥ng (ch·ªâ d√πng Inventory Model)
// ------------------------------
exports.getProductStock = async (req, res) => {
    try {
        const inventoryData = await Inventory.findOne({ productId: req.params.productId });
        if (!inventoryData) {
            return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong Inventory Model" });
        }
        res.json({ inStock: inventoryData.quantity > 0, stockInInventory: inventoryData.quantity });
    } catch (fallbackError) {
        res.status(500).json({
            message: "L·ªói khi ki·ªÉm tra t·ªìn kho t·ª´ Inventory Model",
            error: fallbackError.message,
        });
    }
};

// ------------------------------
// 5Ô∏è‚É£ API th·ªëng k√™ t·ªïng s·ªë l∆∞·ª£ng h√†ng t·ªìn kho t·ª´ Product Service
//     Fallback: n·∫øu l·ªói, t√≠nh t·ª´ d·ªØ li·ªáu trong Inventory Model
// ------------------------------
exports.getStockStats = async (req, res) => {
    try {
        const products = await fetchProductsData();
        const totalStock = products.reduce((sum, product) => sum + product.stock, 0);
        res.json({ totalStock });
    } catch (error) {
        console.error("L·ªói khi th·ªëng k√™ t·ªìn kho t·ª´ Product Service:", error.message);
        // Fallback: t√≠nh t·ªïng t·ª´ Inventory Model
        try {
            const inventoryData = await Inventory.find({});
            const totalStock = inventoryData.reduce((sum, item) => sum + item.quantity, 0);
            res.json({ totalStock });
        } catch (fallbackError) {
            res.status(500).json({
                message: "L·ªói khi th·ªëng k√™ t·ªìn kho t·ª´ Inventory Model",
                error: fallbackError.message,
            });
        }
    }
};

// ------------------------------
// 6Ô∏è‚É£ API nh·∫≠p h√†ng - tƒÉng stock trong Product Service
//      Sau khi c·∫≠p nh·∫≠t Product Service, c·∫≠p nh·∫≠t lu√¥n Inventory Model ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªìng b·ªô
// ------------------------------
exports.importStock = async (req, res) => {
    try {
        const { productId, quantity } = req.params;
        const qty = Number(quantity);
        if (!productId || qty <= 0) {
            return res.status(400).json({ message: "‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
        }
        console.log("üìå Nh·∫≠p h√†ng cho Product ID:", productId);

        // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ Product Service
        const productResponse = await axios.get(`${PRODUCT_SERVICE_URLImport}/${productId}`);
        console.log("üîç D·ªØ li·ªáu s·∫£n ph·∫©m nh·∫≠n ƒë∆∞·ª£c:", productResponse.data);
        const product = productResponse.data;
        if (!product || product.stock == null) {
            return res.status(404).json({ message: "‚ùå S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ho·∫∑c thi·∫øu stock" });
        }
        if (typeof product.stock !== "number") {
            console.error("üö® L·ªói: stock kh√¥ng ph·∫£i l√† s·ªë", product);
            return res.status(500).json({ message: "‚ùå stock kh√¥ng h·ª£p l·ªá", stockType: typeof product.stock });
        }

        // TƒÉng stock
        const newStock = product.stock + qty;
        console.log("üìå Stock m·ªõi:", newStock);

        // C·∫≠p nh·∫≠t stock trong Product Service
        const updateResponse = await axios.put(`${PRODUCT_SERVICE_URLImport}/${productId}`, { stock: newStock });
        console.log("üîÑ K·∫øt qu·∫£ c·∫≠p nh·∫≠t:", updateResponse.data);
        if (!updateResponse.data.data || updateResponse.data.data.stock == null) {
            return res.status(500).json({ message: "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t stock" });
        }

        // C·∫≠p nh·∫≠t lu√¥n Inventory Model sau khi Product Service ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        await Inventory.findOneAndUpdate(
            { productId: productId, name: product.name },
            { quantity: updateResponse.data.data.stock, updatedAt: new Date() },
            { upsert: true, new: true }
        );

        res.status(200).json({
            message: "‚úÖ Nh·∫≠p h√†ng th√†nh c√¥ng!",
            newStock: updateResponse.data.data.stock,
        });
    } catch (error) {
        console.error("üö® L·ªói nh·∫≠p h√†ng:", error.response?.data || error.message);
        res.status(500).json({
            message: "‚ùå L·ªói server khi nh·∫≠p h√†ng",
            error: error.message,
        });
    }
};

// ------------------------------
// 7Ô∏è‚É£ API ƒë·ªìng b·ªô Inventory v·ªõi Product Service
// ------------------------------
exports.syncInventory = async (req, res) => {
    try {
        console.log("üîÑ ƒêang ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª´ Product Service...");
        const products = await fetchProductsData();
        await Promise.all(
            products.map((product) =>
                Inventory.findOneAndUpdate(
                    { productId: product._id, name: product.name },
                    { quantity: product.stock, updatedAt: new Date() },
                    { upsert: true, new: true }
                )
            )
        );
        console.log("‚úÖ ƒê·ªìng b·ªô d·ªØ li·ªáu th√†nh c√¥ng!");
        res.json({ message: "ƒê·ªìng b·ªô d·ªØ li·ªáu th√†nh c√¥ng!" });
    } catch (error) {
        console.error("üö® L·ªói khi ƒë·ªìng b·ªô Inventory:", error.message);
        res.status(500).json({
            message: "L·ªói server khi ƒë·ªìng b·ªô Inventory",
            error: error.message,
        });
    }
};

// ------------------------------
// 8Ô∏è‚É£ API x√°c nh·∫≠n ƒë∆°n h√†ng
//     Sau khi x√°c nh·∫≠n, gi·∫£m s·ªë l∆∞·ª£ng t·ªìn trong Inventory v√† c·∫≠p nh·∫≠t stock cho Product Service
// ------------------------------
exports.confirmOrder = async (req, res) => {
    try {
        // Gi·∫£ s·ª≠ items ƒë∆∞·ª£c truy·ªÅn d∆∞·ªõi d·∫°ng chu·ªói JSON trong req.params.items
        const items = JSON.parse(req.params.items);
        if (!items || !Array.isArray(items) || items.length === 0) {
            return res.status(400).json({ message: "Kh√¥ng c√≥ m·∫∑t h√†ng ƒë·ªÉ x√°c nh·∫≠n" });
        }

        await Promise.all(
            items.map(async (item) => {
                // C·∫≠p nh·∫≠t Inventory: tr·ª´ quantity (kh√¥ng c√≤n reserved)
                const updated = await Inventory.findOneAndUpdate(
                    { productId: item.productId },
                    {
                        $inc: { quantity: -item.quantity },
                        $set: { updatedAt: new Date() }
                    },
                    { new: true }
                );
                if (!updated) {
                    throw new Error(`S·∫£n ph·∫©m ${item.productId} kh√¥ng t·ªìn t·∫°i`);
                }
                if (updated.quantity < 0) {
                    throw new Error(`Kh√¥ng ƒë·ªß h√†ng cho s·∫£n ph·∫©m ${item.productId} sau khi x√°c nh·∫≠n`);
                }
                // C·∫≠p nh·∫≠t l·∫°i stock trong Product Service th√¥ng qua endpoint updateStock
                await axios.put(`${PRODUCT_UPDATE_STOCK_URL}/${item.productId}/${updated.quantity}`, null, { timeout: 5000 });
            })
        );
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi x√°c nh·∫≠n ƒë∆°n h√†ng trong Inventory", error: error.message });
    }
};

// ------------------------------
// 9Ô∏è‚É£ API restore stock: c·ªông th√™m s·ªë l∆∞·ª£ng v√†o t·ªìn kho (tham s·ªë qua params: productId v√† quantity)
// ------------------------------
exports.restoreStock = async (req, res) => {
    try {
        const { productId, quantity } = req.params;
        const qty = Number(quantity);
        if (!productId || !qty || qty <= 0) {
            return res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
        }
        const inventory = await Inventory.findOne({ productId });
        if (!inventory) {
            return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
        }
        // Restore: c·ªông th√™m s·ªë l∆∞·ª£ng v√†o t·ªìn kho
        inventory.quantity += qty;
        inventory.updatedAt = new Date();
        await inventory.save();
        res.json({ success: true, quantity: inventory.quantity });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi restore s·∫£n ph·∫©m", error: error.message });
    }
};

// ------------------------------
// 10Ô∏è‚É£ API l·∫•y th√¥ng tin s·∫£n ph·∫©m trong Inventory
// ------------------------------
exports.getProduct = async (req, res) => {
    try {
        const { productId } = req.params;
        const item = await Inventory.findOne({ productId });
        if (!item) return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
        res.json({
            productId: item.productId,
            quantity: item.quantity,
            name: item.name,
        });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng tin t·ªìn kho", error: error.message });
    }
};
