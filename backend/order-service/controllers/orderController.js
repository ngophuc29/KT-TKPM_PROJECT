const Order = require("../models/Order");
const axios = require("axios");

const CART_API_URL = "http://localhost:3000/api/cart";
const INVENTORY_API = "http://localhost:3000/api/inventory";
const PRODUCT_SERVICE_URLImport = "http://localhost:3000/api/product";
const PRODUCT_UPDATE_STOCK_URL = "http://localhost:3000/api/products/update-stock";

// üìå T·∫°o ƒë∆°n h√†ng

// body
// exports.createOrder = async (req, res) => {
//     try {
//         const { userId, customer, items, shipping, payment, finalTotal, notes } = req.body;

//         if (!userId || !customer || !items || items.length === 0) {
//             return res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
//         }

//         // L·∫•y danh s√°ch productId t·ª´ items
//         const productIds = items.map(item => item.productId);
//         // Chuy·ªÉn m·∫£ng productIds th√†nh chu·ªói ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y ƒë·ªÉ truy·ªÅn qua params
//         const productIdsParam = productIds.join(',');

//         // G·ªçi API bulk c·ªßa Inventory theo ki·ªÉu GET, truy·ªÅn productIds qua params
//         const { data: inventoryData } = await axios.get(`${INVENTORY_API}/bulk/${productIdsParam}`);

//         if (!inventoryData || inventoryData.length === 0) {
//             return res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong kho" });
//         }

//         // Ki·ªÉm tra t·ªìn kho c·ªßa t·ª´ng m·∫∑t h√†ng
//         for (let item of items) {
//             const invItem = inventoryData.find(i => i.productId.toString() === item.productId.toString());
//             if (!invItem || invItem.stock < item.quantity) {
//                 return res.status(400).json({ message: `S·∫£n ph·∫©m ${item.name} kh√¥ng ƒë·ªß h√†ng` });
//             }
//         }

//         // Chuy·ªÉn m·∫£ng items th√†nh chu·ªói JSON v√† encode ƒë·ªÉ truy·ªÅn qua params
//         const itemsParam = encodeURIComponent(JSON.stringify(items));
//         // G·ªçi API confirm c·ªßa Inventory qua POST v·ªõi d·ªØ li·ªáu items truy·ªÅn qua params
//         const confirmRes = await axios.post(`${INVENTORY_API}/confirm/${itemsParam}`);
//         if (!confirmRes.data.success) {
//             return res.status(400).json({ message: "X√°c nh·∫≠n t·ªìn kho th·∫•t b·∫°i" });
//         }

//         // T·∫°o ƒë∆°n h√†ng
//         const order = new Order({
//             userId,
//             customer,
//             items,
//             shipping,
//             payment,
//             finalTotal,
//             notes
//         });
//         await order.save();

//         // X√≥a gi·ªè h√†ng c·ªßa user sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
//         await axios.delete(`${CART_API_URL}/clear/${userId}`);

//         res.json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o", order });
//     } catch (error) {
//         console.error("L·ªói khi t·∫°o ƒë∆°n h√†ng:", error);
//         res.status(500).json({ message: "L·ªói server", error: error.message });
//     }
// };

// params
exports.createOrder = async (req, res) => {
    try {
        // L·∫•y d·ªØ li·ªáu t·ª´ params (v·ªõi c√°c tr∆∞·ªùng ph·ª©c t·∫°p ƒë∆∞·ª£c truy·ªÅn d∆∞·ªõi d·∫°ng chu·ªói JSON)
        const { userId, customer, items, shipping, payment, finalTotal, notes } = req.params;

        // Ki·ªÉm tra d·ªØ li·ªáu c∆° b·∫£n
        if (!userId || !customer || !items || !shipping || !payment || !finalTotal || !notes) {
            return res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
        }

        // Parse c√°c tr∆∞·ªùng JSON
        let customerObj, itemsArr, shippingObj, paymentObj, notesObj;
        try {
            customerObj = JSON.parse(customer);
            itemsArr = JSON.parse(items);
            shippingObj = JSON.parse(shipping);
            paymentObj = JSON.parse(payment);
            notesObj = JSON.parse(notes);
        } catch (err) {
            return res.status(400).json({ message: "D·ªØ li·ªáu JSON kh√¥ng h·ª£p l·ªá", error: err.message });
        }

        if (!Array.isArray(itemsArr) || itemsArr.length === 0) {
            return res.status(400).json({ message: "Kh√¥ng c√≥ m·∫∑t h√†ng ƒë·ªÉ ƒë·∫∑t h√†ng" });
        }

        // L·∫•y danh s√°ch productId t·ª´ items
        const productIds = itemsArr.map(item => item.productId);
        // Chuy·ªÉn m·∫£ng productIds th√†nh chu·ªói ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y ƒë·ªÉ truy·ªÅn qua params
        const productIdsParam = productIds.join(',');

        // G·ªçi API bulk c·ªßa Inventory theo ki·ªÉu GET, truy·ªÅn productIds qua params
        const { data: inventoryData } = await axios.get(`${INVENTORY_API}/bulk/${productIdsParam}`);
        if (!inventoryData || inventoryData.length === 0) {
            return res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong kho" });
        }

        // Ki·ªÉm tra t·ªìn kho c·ªßa t·ª´ng m·∫∑t h√†ng
        for (let item of itemsArr) {
            const invItem = inventoryData.find(i => i.productId.toString() === item.productId.toString());
            if (!invItem || invItem.stock < item.quantity) {
                return res.status(400).json({ message: `S·∫£n ph·∫©m ${item.name} kh√¥ng ƒë·ªß h√†ng` });
            }
        }

        // Chuy·ªÉn m·∫£ng items th√†nh chu·ªói JSON v√† encode ƒë·ªÉ truy·ªÅn qua params
        const itemsParam = encodeURIComponent(JSON.stringify(itemsArr));
        // G·ªçi API confirm c·ªßa Inventory qua POST v·ªõi d·ªØ li·ªáu items truy·ªÅn qua params
        const confirmRes = await axios.post(`${INVENTORY_API}/confirm/${itemsParam}`);
        if (!confirmRes.data.success) {
            return res.status(400).json({ message: "X√°c nh·∫≠n t·ªìn kho th·∫•t b·∫°i" });
        }

        // T·∫°o ƒë∆°n h√†ng (gi·∫£ s·ª≠ Order ƒë√£ ƒë∆∞·ª£c import)
        const order = new Order({
            userId,
            customer: customerObj,
            items: itemsArr,
            shipping: shippingObj,
            payment: paymentObj,
            finalTotal,
            notes: notesObj
        });
        await order.save();

        // X√≥a gi·ªè h√†ng c·ªßa user sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
        // await axios.delete(`${CART_API_URL}/clear/${userId}`);
        for (let item of itemsArr) {
            await axios.delete(`${CART_API_URL}/remove/${userId}/${item.productId}`);
        }

        res.json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o", order });
    } catch (error) {
        console.error("L·ªói khi t·∫°o ƒë∆°n h√†ng:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};


// üìå L·∫•y ƒë∆°n h√†ng theo ID
exports.getOrderById = async (req, res) => {
    try {
        const { orderId } = req.params;
        const order = await Order.findById(orderId).populate("userId");
        if (!order) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
        res.json(order);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// üìå L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa user
exports.getOrdersByUser = async (req, res) => {
    try {
        const { userId } = req.params;
        const orders = await Order.find({ userId });
        res.json(orders);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// üìå L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (Admin)
exports.getAllOrders = async (req, res) => {
    try {
        const orders = await Order.find({}).populate("userId").sort({ createdAt: -1 }); // S·∫Øp x·∫øp theo ng√†y t·∫°o gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc);
        res.json(orders);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// üìå C·∫≠p nh·∫≠t ƒë∆°n h√†ng (Admin)
// Cho ph√©p c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng nh∆∞ status, shipping, payment, sellerNote,...
// exports.updateOrder = async (req, res) => {
//     try {
//         const { orderId } = req.params;
//         const updateData = req.body; // V√≠ d·ª•: { status: "completed", shipping: { ... }, payment: { ... } }
//         const order = await Order.findByIdAndUpdate(orderId, updateData, { new: true });
//         if (!order) return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });
//         res.json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t", order });
//     } catch (error) {
//         res.status(500).json({ message: "L·ªói server", error: error.message });
//     }
// };
exports.updateOrder = async (req, res) => {
    try {
        const { orderId, updateData } = req.params;
        if (!orderId || !updateData) {
            return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu c·∫ßn thi·∫øt" });
        }

        let parsedData;
        try {
            parsedData = JSON.parse(updateData);
        } catch (err) {
            return res.status(400).json({ message: "D·ªØ li·ªáu update kh√¥ng h·ª£p l·ªá", error: err.message });
        }

        const order = await Order.findByIdAndUpdate(orderId, parsedData, { new: true });
        if (!order) return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });
        res.json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t", order });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// üìå H·ªßy ƒë∆°n h√†ng
exports.cancelOrder = async (req, res) => {
    try {
        const { orderId } = req.params;
        const order = await Order.findById(orderId);
        if (!order) return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });

        // Cho ph√©p h·ªßy n·∫øu ƒë∆°n h√†ng ch∆∞a ƒë∆∞·ª£c x√°c nh·∫≠n (status l√† "pending")
        if (order.status !== "pending") {
            return res.status(400).json({ message: "Ch·ªâ ƒë∆°n h√†ng ch∆∞a x√°c nh·∫≠n m·ªõi c√≥ th·ªÉ h·ªßy" });
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh "cancelled"
        order.status = "cancelled";
        await order.save();

        // G·ªçi API release cho t·ª´ng m·∫∑t h√†ng (s·ª≠ d·ª•ng params)
        for (const item of order.items) {
            try {
                await axios.put(`${INVENTORY_API}/release/${item.productId}/${item.quantity}`);
            } catch (err) {
                console.error(
                    `L·ªói khi g·ªçi API release cho s·∫£n ph·∫©m ${item.productId}:`,
                    err.response?.data || err.message
                );
                // B·∫°n c√≥ th·ªÉ quy·∫øt ƒë·ªãnh x·ª≠ l√Ω l·ªói ri√™ng cho t·ª´ng item (ho·∫∑c th√¥ng b√°o cho ng∆∞·ªùi d√πng)
            }
        }

        res.json({ message: "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy", order });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};


// üìå H·ªßy ƒë∆°n h√†ng b·ªüi Admin (kh√¥ng r√†ng bu·ªôc tr·∫°ng th√°i)
// exports.adminCancelOrder = async (req, res) => {
//     try {
//         const { orderId } = req.params;
//         const order = await Order.findById(orderId);
//         if (!order) return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });

//         // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh "cancelled"
//         order.status = "cancelled";
//         await order.save();

//         // Duy·ªát qua t·ª´ng m·∫∑t h√†ng v√† restore stock trong Inventory Service
//         for (const item of order.items) {
//             try {
//                 // G·ªçi API restore ƒë·ªÉ c·ªông l·∫°i s·ªë l∆∞·ª£ng v√†o t·ªìn kho
//                 await axios.put(`${INVENTORY_API}/restore`, {
//                     productId: item.productId.toString(),
//                     quantity: item.quantity
//                 });
//                 // Sau ƒë√≥, ƒë·ªìng b·ªô l·∫°i stock ·ªü Product Service
//                 const invRes = await axios.get(`${INVENTORY_API}/product/${item.productId.toString()}`);
//                 if (invRes.data) {
//                     await axios.put(`${PRODUCT_SERVICE_URLImport}/${item.productId.toString()}`, {
//                         stock: invRes.data.quantity
//                     });
//                 }
//             } catch (err) {
//                 console.error(`L·ªói khi restore stock cho s·∫£n ph·∫©m ${item.productId.toString()}:`, err.response?.data || err.message);
//             }
//         }

//         res.json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy b·ªüi Admin v√† t·ªìn kho ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c", order });
//     } catch (error) {
//         console.error("L·ªói trong adminCancelOrder:", error.message);
//         res.status(500).json({ message: "L·ªói server", error: error.message });
//     }
// };

exports.adminCancelOrder = async (req, res) => {
    try {
        const { orderId } = req.params;
        const order = await Order.findById(orderId);
        if (!order) return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh "cancelled"
        order.status = "cancelled";
        await order.save();

        // Duy·ªát qua t·ª´ng m·∫∑t h√†ng v√† g·ªçi API restore theo d·∫°ng params
        for (const item of order.items) {
            try {
                // G·ªçi API restore c·ªßa Inventory Service ƒë·ªÉ c·ªông th√™m s·ªë l∆∞·ª£ng
                await axios.post(`${INVENTORY_API}/restore/${item.productId.toString()}/${item.quantity}`);

                // Sau ƒë√≥, l·∫•y d·ªØ li·ªáu m·ªõi t·ª´ Inventory qua endpoint GET /product/:productId
                const invRes = await axios.get(`${INVENTORY_API}/product/${item.productId.toString()}`);
                if (invRes.data) {
                    // C·∫≠p nh·∫≠t l·∫°i stock trong Product Service d·ª±a tr√™n s·ªë li·ªáu m·ªõi t·ª´ Inventory
                    // await axios.put(`${PRODUCT_SERVICE_URLImport}/${item.productId.toString()}`, {
                    //     stock: invRes.data.quantity
                    // });
                    await axios.put(`${PRODUCT_UPDATE_STOCK_URL}/${item.productId}/${invRes.data.quantity}`, null, { timeout: 5000 });

                }
            } catch (err) {
                console.error(
                    `L·ªói khi restore stock cho s·∫£n ph·∫©m ${item.productId.toString()}:`,
                    err.response?.data || err.message
                );
            }
        }

        res.json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy b·ªüi Admin; t·ªìn kho v√† Product Service ƒë√£ ƒë∆∞·ª£c restore", order });
    } catch (error) {
        console.error("L·ªói trong adminCancelOrder:", error.message);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};








// üìå X√≥a ƒë∆°n h√†ng b·ªüi Admin (AdminDeleteOrder)
// L∆∞u √Ω: Tr∆∞·ªõc khi x√≥a, n·∫øu ƒë∆°n h√†ng ch∆∞a b·ªã h·ªßy, b·∫°n c√≥ th·ªÉ g·ªçi API Inventory ƒë·ªÉ ho√†n tr·∫£ h√†ng v·ªÅ kho.
exports.adminDeleteOrder = async (req, res) => {
    try {
        const { orderId } = req.params;
        const order = await Order.findById(orderId);
        if (!order) return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });

        // N·∫øu ƒë∆°n h√†ng ch∆∞a b·ªã h·ªßy, th·ª±c hi·ªán ho√†n tr·∫£ h√†ng v·ªÅ kho
        if (order.status !== "cancelled") {
            // Thay v√¨ g·ªçi API v·ªõi body { items: order.items },
            // l·∫∑p qua t·ª´ng m·∫∑t h√†ng v√† g·ªçi API release theo params.
            for (const item of order.items) {
                try {
                    await axios.put(`${INVENTORY_API}/release/${item.productId}/${item.quantity}`);
                } catch (err) {
                    console.error(
                        `L·ªói khi g·ªçi API release cho s·∫£n ph·∫©m ${item.productId}:`,
                        err.response?.data || err.message
                    );
                    return res.status(500).json({
                        message: "L·ªói khi ho√†n tr·∫£ h√†ng v·ªÅ kho",
                        error: err.message,
                    });
                }
            }
        }

        // X√≥a ƒë∆°n h√†ng kh·ªèi CSDL
        await Order.findByIdAndDelete(orderId);
        res.json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a b·ªüi Admin" });
    } catch (error) {
        console.error("L·ªói trong adminDeleteOrder:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};


